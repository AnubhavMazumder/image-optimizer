#!/bin/bash
# bin/image-optimizer

# Version
VERSION="1.0.0"

# Default values
QUALITY_JPEG=60
QUALITY_WEBP=75
MAX_WIDTH=1920
MAX_HEIGHT=1080

# Tokyo Night Colors (preserved from your original)
C_BG="#1a1b26"
C_FG="#a9b1d6"
C_CYAN="#7dcfff"
C_GREEN="#9ece6a"
C_MAGENTA="#bb9af7"
C_RED="#f7768e"
C_YELLOW="#e0af68"

# ANSI color codes
BOLD="\e[1m"
RESET="\e[0m"
BG="\e[48;2;26;27;38m"
FG="\e[38;2;169;177;214m"
CYAN="\e[38;2;125;207;255m"
GREEN="\e[38;2;158;206;106m"
MAGENTA="\e[38;2;187;154;247m"
RED="\e[38;2;247;118;142m"
YELLOW="\e[38;2;224;175;104m"

# Function to display help
show_help() {
    cat << EOF
Usage: image-optimizer [OPTIONS] INPUT_FILE [OUTPUT_DIR]

Options:
    -h, --help              Show this help message
    -v, --version           Show version information
    -q, --quality QUALITY   JPEG quality (1-100, default: 60)
    -w, --webp QUALITY     WebP quality (1-100, default: 75)
    --max-width WIDTH      Maximum width (default: 1920)
    --max-height HEIGHT    Maximum height (default: 1080)
    --no-jpg              Skip JPEG optimization
    --no-png              Skip PNG optimization
    --no-webp             Skip WebP optimization

Example:
    image-optimizer -q 70 image.jpg ./output
EOF
}

# Function to display version
show_version() {
    echo "image-optimizer version $VERSION"
}

# Function to check dependencies
check_deps() {
    local deps=("convert" "jpegoptim" "optipng" "cwebp")
    local missing=()

    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            missing+=("$dep")
        fi
    done

    if [ ${#missing[@]} -ne 0 ]; then
        echo -e "${RED}Error: Missing dependencies: ${missing[*]}${RESET}"
        echo "Please install the required packages:"
        echo "  - imagemagick (for convert)"
        echo "  - jpegoptim"
        echo "  - optipng"
        echo "  - libwebp (for cwebp)"
        exit 1
    fi
}

# Parse arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                show_version
                exit 0
                ;;
            -q|--quality)
                QUALITY_JPEG="$2"
                shift 2
                ;;
            -w|--webp)
                QUALITY_WEBP="$2"
                shift 2
                ;;
            --max-width)
                MAX_WIDTH="$2"
                shift 2
                ;;
            --max-height)
                MAX_HEIGHT="$2"
                shift 2
                ;;
            --no-jpg)
                NO_JPG=1
                shift
                ;;
            --no-png)
                NO_PNG=1
                shift
                ;;
            --no-webp)
                NO_WEBP=1
                shift
                ;;
            *)
                if [ -z "$INPUT_FILE" ]; then
                    INPUT_FILE="$1"
                elif [ -z "$OUTPUT_DIR" ]; then
                    OUTPUT_DIR="$1"
                else
                    echo -e "${RED}Error: Unexpected argument: $1${RESET}"
                    show_help
                    exit 1
                fi
                shift
                ;;
        esac
    done
}

# Main optimization function
optimize_image() {
    local input="$1"
    local output_dir="${2:-.}"
    
    # Create output directory if it doesn't exist
    mkdir -p "$output_dir"
    
    # Base filename without extension
    local basename=$(basename "${input%.*}")
    
    # Show ASCII art
    echo -e "${BOLD}${MAGENTA}"
    cat << "EOF"
   _____                            ____        *   *           _              
  |_   *|                          / *_ \      | | (_)         (_)             
    | |  *_* ___   __ *  *_ *  *__| |  | |_ __ | |_ * ***_**  *_*_____ *_* 
    | | | '_ `  \ / ` |/ ` |/  \ |  | | '_ \| __| | '_ ` * \| |*  / * \ '*_|
   *| |*| | | | | | (_| | (_| |  **/ |**| | |_) | |_| | | | | | | |/ /  __/ |   
  |_____|_| |_| |_|\__,_|\__, |\___|\____/| .__/ \__|_|_| |_| |_|_/___\___|_|   
                          __/ |           | |                                   
                         |___/            |_|                                   
EOF
    echo -e "${RESET}"

    # Optimize JPEG
    if [ -z "$NO_JPG" ]; then
        echo -e "${YELLOW}Optimizing JPEG...${RESET}"
        convert "$input" \
            -strip \
            -interlace Plane \
            -gaussian-blur 0.05 \
            -quality ${QUALITY_JPEG}% \
            -resize ${MAX_WIDTH}x${MAX_HEIGHT}\> \
            "$output_dir/${basename}.jpg"
        jpegoptim --max=50 --strip-all --all-progressive "$output_dir/${basename}.jpg"
    fi

    # Optimize PNG
    if [ -z "$NO_PNG" ]; then
        echo -e "${GREEN}Creating and optimizing PNG...${RESET}"
        convert "$input" \
            -strip \
            -resize ${MAX_WIDTH}x${MAX_HEIGHT}\> \
            "$output_dir/${basename}.png"
        optipng -o7 "$output_dir/${basename}.png"
    fi

    # Create WebP
    if [ -z "$NO_WEBP" ]; then
        echo -e "${MAGENTA}Creating and optimizing WebP...${RESET}"
        cwebp -q ${QUALITY_WEBP} "$input" -o "$output_dir/${basename}.webp"
    fi

    # Display results
    echo -e "\n${BOLD}${CYAN}Optimization Results:${RESET}"
    echo -e "${BG}${FG}Original size:       ${YELLOW}$(du -h "$input" | cut -f1)${RESET}"
    [ -z "$NO_JPG" ] && echo -e "${BG}${FG}Optimized JPEG size: ${GREEN}$(du -h "$output_dir/${basename}.jpg" | cut -f1)${RESET}"
    [ -z "$NO_PNG" ] && echo -e "${BG}${FG}Optimized PNG size:  ${MAGENTA}$(du -h "$output_dir/${basename}.png" | cut -f1)${RESET}"
    [ -z "$NO_WEBP" ] && echo -e "${BG}${FG}Optimized WebP size: ${CYAN}$(du -h "$output_dir/${basename}.webp" | cut -f1)${RESET}"
}

# Main execution
main() {
    check_deps
    parse_args "$@"

    if [ -z "$INPUT_FILE" ]; then
        echo -e "${RED}Error: No input file specified${RESET}"
        show_help
        exit 1
    fi

    if [ ! -f "$INPUT_FILE" ]; then
        echo -e "${RED}Error: Input file does not exist: $INPUT_FILE${RESET}"
        exit 1
    fi

    optimize_image "$INPUT_FILE" "$OUTPUT_DIR"
    
    echo -e "\n${BOLD}${GREEN}Optimization complete!${RESET}"
    echo -e "${FG}Please check the quality of the optimized images and use the one that best balances size and quality for your needs.${RESET}"
    echo -e "\n${BOLD}${YELLOW}Created by Anubhav with ‚ù§Ô∏è${RESET}"
    echo -e "${CYAN}Happy optimizing! üöÄ${RESET}"
}

main "$@"
